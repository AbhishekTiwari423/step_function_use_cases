{
	"Comment": "Step function for parallel job execution with dynamic parallelism feature",
	"StartAt": "Validator_Lambda",
	"States":{
		"Validator_Lambda":{
			"Type":"Task",
			"ResultPath":"$.taskresult",
			"Resource": "lambda_arn",
			"Parameters":{
				"FunctionName.$":"$.function_name",
				"Payload":{
					"Input.$":"$"
				}
			},
			"Next": "Launch_Cluster"
		},
		"Launch_Cluster":{
			"Type":"Task",
			"InputPath": "$",
			"Resource": "arn:aws:states:::elasticmapreduce:createCluster.sync",
			"Parameters":{
				"Name.$": "$.Name",
				"VisibleToAllUsers":true,
				"ReleaseLabel.$":"$.release_label",
				"SecurityConfiguration.$":"$.security_configuration",
				"Applications":[
					{
						"Name": "Hadoop"
					},
					{
						"Name": "Hive"
					},
					{
						"Name":"Spark"
					}
				],
				"Configurations":[
					{
						"Classifucations":"spark-env",
						"Properties":{},
						"Configurations":[
							{
								"Classification": "export",
								"Properties":{
									"PYSPARK_PYTHON.$":"$.pyspark_python"
								}
							}
						]
					}
				],
				"Tags":[
					{
						"Key":"name",
						"Value.$":"$.Name"
					},
					{
						"Key":"application-id",
						"Value.$":"$.application-id"
					},
					{
						"Key":"environment",
						"Value.$":"$.environment"
					},
					{
						"Key":"date-created",
						"Value.$":"$.date-created"
					},
					{
						"Key":"created-by",
						"Value.$":"$.created-by"
					}
				],
				"ServiceRole.$":"$.ServiceRole",
				"StepConcurrencyLevel":10,
				"JobFlowRole.$":"$.JobFlowRole",
				"RepoUpgradeOnBoot":"NONE",
				"CustomAmiId.$":"$.AmiId",
				"LogUri.$":"$.LogUri",
				"Instances":{
					"Ec2SubnetIds.$":"$.Args[*]",
					"EmrManagedMasterSecurityGroup.$":"$.EmrManagedMasterSecurityGroup",
					"EmrManagedSlaveSecurityGroup.$":"$.EmrManagedSlaveSecurityGroup",
					"ServiceAccessSecurityGroup.$":"$.ServiceAccessSecurityGroup",
					"KeepJobFlowAliveWhenNoSteps":true,
					"TerminationProtected":true,
					"InstanceFleets":[
						{
							"Name":"Masterfleet",
							"InstanceFleetType":"Master",
							"TargetOnDemandCapacity":1,
							"InstanceTypeConfigs":[
								{
									"InstanceType.$":"$.MasterInstanceType"
								}
							]
						},
						{
							"Name":"Corefleet",
							"InstanceFleetType":"CORE",
							"TargetSpotCapacity":2,
							"TargetOnDemandCapacity":0,
							"LaunchSpecifications":{
								"SpotSpecifications":{
									"TimeoutDurationMinutes":30,
									"TimeoutAction":"SWITCH_TO_ON_DEMAND"
								}
							},
							"InstanceTypeConfigs":[
								{
									"InstanceType.$":"$.CoreInstanceType1"
								},
								{
									"InstanceType.$":"$.CoreInstanceType2"
								}
							]
							 
						}
					]
				}
			},
			"Catch":[
				{
					"ErrorEquals":[
						"States.ALL"
					],
					"ResultPath":null,
					"Next":"Failed_To_Launch_Cluster"
				}
			],
			"ResultPath":"$.CreateClusterResult",
			"Next":"Choice_Of_Processing"
		},
		"Choice_Of_Processing":{
			"Type":"Choice",
			"Choices":[
				{
					"Variable":"$.taskresult.Payload.ConcurrenctLimit",
					"NumericEquals":1,
					"Next":"Sequential"
				},
				{
					"Variable":"$.taskresult.Payload.ConcurrenctLimit",
					"NumericGreaterThan":1,
					"Next":"Parallel"
				}
			],
			"Default":"Sequential"
		},
		"Parallel":{
			"Type":"Pass",
			"Next":"Parallel_Processing"
		},
		"Sequential":{
			"Type":"Pass",
			"Next":"Sequential_Processing"
		},
		"Parallel_Processing":{
			"Type":"Map",
			"MaxConcurrency":4,
			"ItemsPath":"$.taskresult.Payload.Jobs",
			"Parameters":{
				"Jobs.$":"$$.Map.Item.Value",
				"Cluster.$":"$.CreateClusterResult.clusterid",
				"TopicArn.$":"$.TopicArn",
				"Message.$":"$.taskresult.Payload.message",
				"Subject":"$.taskresult.Payload.subject",
				"ExceptionMessage.$":"taskresult.Payload.exception_message",
				"ExeceptionSubject.$":"$.taskresult.Payload.exception_subject",
				"AuditMerge.$":"$.taskresult.Payload.audit_merge_job"
			},
			"Iterator":{
				"StartAt":"Process_Files_Parallely",
				"States":{
					"Process_Files_Parallely":{
						"Type":"Task",
						"InputPath":"$",
						"Resource":"arn:aws:states:::elasticmapreduce:addStep.sync",
						"Parameters":{
							"ClusterId.$":"$.Clusterid",
							"Step":{
								"Name":"Process_Files",
								"ActionOnFailure":"CONTINUE",
								"HadoopJarStep":{
									"Jar":"command-runner.jar",
									"Args.$":"$.Job.sparkInputs[*][*]"
								}
							}
						},
						"Catch":[
							{
								"ErrorEquals":[
									"States.ALL"
								],
								"ResultPath":null,
								"Next":"Parallel_Instance_Processing_Exception"
							}
						],
						"ResultPath":null,
						"Next":"Parallel_Instance_Processing_Completed"
					},
					"Parallel_Instance_Processing_Completed":{
						"Type":"Pass",
						"InputPath":"$",
						"ResultPath":null,
						"End":true
					},
					"Parallel_Instance_Processing_Exception":{
						"Type":"Task",
						"InputPath":"$",
						"Resource":"arn:aws:states:::sns:publish",
						"Parameters":{
							"TopicArn":"$.TopicArn",
							"Message.$":"$.ExceptionMessage",
							"Subject.$":"$.ExeceptionSubject"
						},
						"ResultPath":null,
						"End":true
					}
				}
			},
			"Next":"Disable_Termination_Protection"
		},
		"Sequential_Processing":{
			"Type":"Map",
			"MaxConcurrency":1,
			"ItemsPath":"$.taskresult.Payload.Jobs",
			"Parameters":{
				"Jobs.$":"$$.Map.Item.Value",
				"Cluster.$":"$.CreateClusterResult.clusterid",
				"TopicArn.$":"$.TopicArn",
				"Message.$":"$.taskresult.Payload.message",
				"Subject":"$.taskresult.Payload.subject",
				"ExceptionMessage.$":"taskresult.Payload.exception_message",
				"ExeceptionSubject.$":"$.taskresult.Payload.exception_subject",
				"AuditMerge.$":"$.taskresult.Payload.audit_merge_job"
			},
			"Iterator":{
				"StartAt":"Process_Files_Sequentially",
				"States":{
					"Process_Files_Sequentially":{
						"Type":"Task",
						"InputPath":"$",
						"Resource":"arn:aws:states:::elasticmapreduce:addStep.sync",
						"Parameters":{
							"ClusterId.$":"$.Clusterid",
							"Step":{
								"Name":"Process_Files",
								"ActionOnFailure":"CONTINUE",
								"HadoopJarStep":{
									"Jar":"command-runner.jar",
									"Args.$":"$.Job.sparkInputs[*][*]"
								}
							}
						},
						"Catch":[
							{
								"ErrorEquals":[
									"States.ALL"
								],
								"ResultPath":null,
								"Next":"Sequential_Instance_Processing_Exception"
							}
						],
						"ResultPath":null,
						"Next":"Sequential_Instance_Processing_Completed"
					},
					"Sequential_Instance_Processing_Completed":{
						"Type":"Pass",
						"InputPath":"$",
						"ResultPath":null,
						"End":true
					},
					"Sequential_Instance_Processing_Exception":{
						"Type":"Task",
						"InputPath":"$",
						"Resource":"arn:aws:states:::sns:publish",
						"Parameters":{
							"TopicArn":"$.TopicArn",
							"Message.$":"$.ExceptionMessage",
							"Subject.$":"$.ExeceptionSubject"
						},
						"ResultPath":null,
						"End":true
					}
				}
			},
			"Next":"Disable_Termination_Protection"
		},
		"Disable_Termination_Protection":{
			"Type":"Task",
			"InputPath":"$",
			"Resource":"arn:aws:states:::elasticmapreduce:setClusterTerminationProtection",
			"Parameters":{
				"ClusterId.$":"$[0].clusterId",
				"TerminationProtected":false
			},
			"ResultPath":null,
			"Next":"Terminate_Cluster"
		},
		"Terminate_Cluster":{
			"Type":"Task",
			"InputPath":"$",
			"Resource":"arn:aws:states:::elasticmapreduce:terminateCluster.sync",
			"Parameters":{
				"ClusterId.$":"$[0].ClusterId"
			},
			"Next":"Wrapping_Up"
		},
		"Send_Notification":{
			"Type":"Task",
			"InputPath":"$",
			"Parameters":{
				"TopicArn.$":"TopicArn",
				"Message.$":"$.Message",
				"Subject.$":"$.Subject"
			},
			"ResultPath":null,
			"Next":"Wrapping_Up"
		},
		"Failed_To_Launch_Cluster":{
			"Type":"Pass",
			"Parameters":{
				"TopicArn.$":"$.TopicArn",
				"Message.$":"$.taskresult.Payload.cluster_failure_message",
				"Subject.$":"$.taskresult.Payload.cluster_failure_subject"
			},
			"Next":"Send_Notification"
		},
		"Wrapping_Up":{
			"Type":"Pass",
			"End":true
		}
	}
}
